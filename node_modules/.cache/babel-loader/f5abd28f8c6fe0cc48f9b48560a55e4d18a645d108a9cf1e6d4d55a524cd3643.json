{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport * as THREE from \"three\";\nimport TWEEN from \"tween.js\";\nimport TrackballControls from \"three/examples/jsm/controls/TrackballControls\";\nimport { CSS3DRenderer, CSS3DObject } from \"three/examples/jsm/renderers/CSS3DRenderer\";\nexport default {\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      controls: null,\n      objects: [],\n      targets: [],\n      picArr: []\n    };\n  },\n  mounted() {\n    this.generatePictures();\n    this.init();\n    this.animate();\n    window.addEventListener(\"resize\", this.onWindowResize);\n  },\n  methods: {\n    generatePictures() {\n      for (let i = 0; i < 199; i++) {\n        let yu = i % 16 || 16;\n        this.picArr.push({\n          url: `img/${yu}.jpeg`\n        });\n      }\n    },\n    init() {\n      // 初始化相机\n      this.camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000);\n      this.camera.position.z = 3000;\n\n      // 初始化场景\n      this.scene = new THREE.Scene();\n\n      // 添加图片元素\n      this.picArr.forEach((pic, index) => {\n        const dom = document.createElement(\"div\");\n        dom.className = \"element\";\n        const img = document.createElement(\"img\");\n        img.src = pic.url;\n        dom.appendChild(img);\n        const object = new CSS3DObject(dom);\n        object.position.x = Math.random() * 4000 - 2000;\n        object.position.y = Math.random() * 4000 - 2000;\n        object.position.z = Math.random() * 4000 - 2000;\n        this.scene.add(object);\n        this.objects.push(object);\n      });\n\n      // 设置球形目标\n      const vector = new THREE.Vector3();\n      const spherical = new THREE.Spherical();\n      this.objects.forEach((_, i) => {\n        const phi = Math.acos(-1 + 2 * i / this.objects.length);\n        const theta = Math.sqrt(this.objects.length * Math.PI) * phi;\n        const object = new THREE.Object3D();\n        spherical.set(800, phi, theta);\n        object.position.setFromSpherical(spherical);\n        vector.copy(object.position).multiplyScalar(2);\n        object.lookAt(vector);\n        this.targets.push(object);\n      });\n\n      // 初始化渲染器\n      this.renderer = new CSS3DRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.renderer.domElement.style.position = \"absolute\";\n      document.getElementById(\"container\").appendChild(this.renderer.domElement);\n\n      // 初始化控制器\n      this.controls = new TrackballControls(this.camera, this.renderer.domElement);\n      this.controls.rotateSpeed = 0.5;\n      this.controls.minDistance = 500;\n      this.controls.maxDistance = 6000;\n      this.controls.addEventListener(\"change\", this.render);\n\n      // 开始变换\n      this.transform();\n    },\n    transform() {\n      const duration = 2000;\n      TWEEN.removeAll();\n      this.objects.forEach((object, i) => {\n        const target = this.targets[i];\n        new TWEEN.Tween(object.position).to({\n          x: target.position.x,\n          y: target.position.y,\n          z: target.position.z\n        }, Math.random() * duration + duration).easing(TWEEN.Easing.Exponential.InOut).start();\n        new TWEEN.Tween(object.rotation).to({\n          x: target.rotation.x,\n          y: target.rotation.y,\n          z: target.rotation.z\n        }, Math.random() * duration + duration).easing(TWEEN.Easing.Exponential.InOut).start();\n      });\n      new TWEEN.Tween(this).to({}, duration * 2).onUpdate(this.render).start();\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.render();\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      TWEEN.update();\n      this.controls.update();\n      this.scene.rotation.y += 0.001;\n      this.render();\n    },\n    render() {\n      this.renderer.render(this.scene, this.camera);\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.onWindowResize);\n  }\n};","map":{"version":3,"names":["THREE","TWEEN","TrackballControls","CSS3DRenderer","CSS3DObject","data","camera","scene","renderer","controls","objects","targets","picArr","mounted","generatePictures","init","animate","window","addEventListener","onWindowResize","methods","i","yu","push","url","PerspectiveCamera","innerWidth","innerHeight","position","z","Scene","forEach","pic","index","dom","document","createElement","className","img","src","appendChild","object","x","Math","random","y","add","vector","Vector3","spherical","Spherical","_","phi","acos","length","theta","sqrt","PI","Object3D","set","setFromSpherical","copy","multiplyScalar","lookAt","setSize","domElement","style","getElementById","rotateSpeed","minDistance","maxDistance","render","transform","duration","removeAll","target","Tween","to","easing","Easing","Exponential","InOut","start","rotation","onUpdate","aspect","updateProjectionMatrix","requestAnimationFrame","update","beforeDestroy","removeEventListener"],"sources":["src/views/AboutView.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"container\"></div>\n    <audio autoplay loop controls id=\"music\" ref=\"music\">\n      <source src=\"img/875007460.mp3\" />\n    </audio>\n  </div>\n</template>\n\n<script>\nimport * as THREE from \"three\";\nimport TWEEN from \"tween.js\";\nimport TrackballControls from \"three/examples/jsm/controls/TrackballControls\";\nimport { CSS3DRenderer, CSS3DObject } from \"three/examples/jsm/renderers/CSS3DRenderer\";\n\nexport default {\n  data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      controls: null,\n      objects: [],\n      targets: [],\n      picArr: [],\n    };\n  },\n  mounted() {\n    this.generatePictures();\n    this.init();\n    this.animate();\n    window.addEventListener(\"resize\", this.onWindowResize);\n  },\n  methods: {\n    generatePictures() {\n      for (let i = 0; i < 199; i++) {\n        let yu = i % 16 || 16;\n        this.picArr.push({ url: `img/${yu}.jpeg` });\n      }\n    },\n    init() {\n      // 初始化相机\n      this.camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000);\n      this.camera.position.z = 3000;\n\n      // 初始化场景\n      this.scene = new THREE.Scene();\n\n      // 添加图片元素\n      this.picArr.forEach((pic, index) => {\n        const dom = document.createElement(\"div\");\n        dom.className = \"element\";\n        const img = document.createElement(\"img\");\n        img.src = pic.url;\n        dom.appendChild(img);\n\n        const object = new CSS3DObject(dom);\n        object.position.x = Math.random() * 4000 - 2000;\n        object.position.y = Math.random() * 4000 - 2000;\n        object.position.z = Math.random() * 4000 - 2000;\n        this.scene.add(object);\n        this.objects.push(object);\n      });\n\n      // 设置球形目标\n      const vector = new THREE.Vector3();\n      const spherical = new THREE.Spherical();\n      this.objects.forEach((_, i) => {\n        const phi = Math.acos(-1 + (2 * i) / this.objects.length);\n        const theta = Math.sqrt(this.objects.length * Math.PI) * phi;\n        const object = new THREE.Object3D();\n        spherical.set(800, phi, theta);\n        object.position.setFromSpherical(spherical);\n        vector.copy(object.position).multiplyScalar(2);\n        object.lookAt(vector);\n        this.targets.push(object);\n      });\n\n      // 初始化渲染器\n      this.renderer = new CSS3DRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.renderer.domElement.style.position = \"absolute\";\n      document.getElementById(\"container\").appendChild(this.renderer.domElement);\n\n      // 初始化控制器\n      this.controls = new TrackballControls(this.camera, this.renderer.domElement);\n      this.controls.rotateSpeed = 0.5;\n      this.controls.minDistance = 500;\n      this.controls.maxDistance = 6000;\n      this.controls.addEventListener(\"change\", this.render);\n\n      // 开始变换\n      this.transform();\n    },\n    transform() {\n      const duration = 2000;\n      TWEEN.removeAll();\n      this.objects.forEach((object, i) => {\n        const target = this.targets[i];\n        new TWEEN.Tween(object.position)\n          .to(\n            { x: target.position.x, y: target.position.y, z: target.position.z },\n            Math.random() * duration + duration\n          )\n          .easing(TWEEN.Easing.Exponential.InOut)\n          .start();\n\n        new TWEEN.Tween(object.rotation)\n          .to(\n            { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z },\n            Math.random() * duration + duration\n          )\n          .easing(TWEEN.Easing.Exponential.InOut)\n          .start();\n      });\n\n      new TWEEN.Tween(this)\n        .to({}, duration * 2)\n        .onUpdate(this.render)\n        .start();\n    },\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.render();\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      TWEEN.update();\n      this.controls.update();\n      this.scene.rotation.y += 0.001;\n      this.render();\n    },\n    render() {\n      this.renderer.render(this.scene, this.camera);\n    },\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.onWindowResize);\n  },\n};\n</script>\n\n<style scoped>\nhtml,\nbody {\n  height: 100%;\n}\n\nbody {\n  background-color: #000000;\n  margin: 0;\n  overflow: hidden;\n}\n\n.element {\n  width: 140px;\n  height: 140px;\n  cursor: pointer;\n  box-shadow: 0px 0px 12px rgba(238, 196, 11, 0.5);\n  border: 2px solid #fff;\n  text-align: center;\n}\n\n.element:hover {\n  box-shadow: 0px 0px 12px rgba(11, 250, 250, 0.85);\n  border: 2px solid rgba(127, 255, 255, 0.85);\n}\n\n.element img {\n  width: 140px;\n  height: 140px;\n  cursor: pointer;\n}\n\n#music {\n  display: none;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}