{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport * as THREE from 'three';\nimport music1 from '@/assets/thisisus.mp3'; // 使用别名导入资源，@ 通常指向 src\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nexport default {\n  name: 'HomeView',\n  mounted() {\n    this.initScene();\n    this.init_photo();\n    document.addEventListener(\"mousewheel\", this.handleWheel);\n    document.addEventListener(\"pointerdown\", this.handlePointerDown);\n    // // 动画循环\n    // const animate = () => {\n    //   requestAnimationFrame(animate);\n    //   this.uniforms.time.value += 0.05;\n    //   this.renderer.render(this.scene, this.camera);\n    // };\n  },\n  data() {\n    return {\n      radius: 560,\n      // 所有图片路径相同，保持与原有数量一致\n      basePath: \"https://joes-bucket.oss-cn-shanghai.aliyuncs.com/img/IMG_2581.JPG\",\n      images1: Array(20).fill(\"https://joes-bucket.oss-cn-shanghai.aliyuncs.com/img/IMG_2581.JPG\"),\n      images2: Array(21).fill(\"https://joes-bucket.oss-cn-shanghai.aliyuncs.com/img/IMG_2581.JPG\"),\n      images3: Array(22).fill(\"https://joes-bucket.oss-cn-shanghai.aliyuncs.com/img/IMG_2581.JPG\"),\n      tX: 0,\n      tY: 10,\n      desX: 0,\n      desY: 0,\n      startX: 0,\n      startY: 0,\n      outDomTimer: null,\n      loading: false,\n      buttonsVisible: true,\n      music: null,\n      musicList: [{\n        id: 1,\n        name: 'music1',\n        url: music1\n      }, {\n        id: 2,\n        name: 'music2',\n        url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3'\n      }, {\n        id: 3,\n        name: 'music3',\n        url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3'\n      }],\n      PI: Math.PI,\n      TAU: 2 * Math.PI,\n      scene: null,\n      camera: null,\n      renderer: null,\n      analyser: null,\n      step: 0,\n      uniforms: {\n        time: {\n          type: \"f\",\n          value: 0.0\n        },\n        step: {\n          type: \"f\",\n          value: 0.0\n        }\n      },\n      params: {\n        exposure: 1,\n        bloomStrength: 0.9,\n        bloomThreshold: 0,\n        bloomRadius: 0.5\n      },\n      composer: null,\n      fftSize: 2048,\n      totalPoints: 4000,\n      listener: null,\n      audio: null\n    };\n  },\n  methods: {\n    setStyle(delayTime, dom, i, len) {\n      dom.style.transform = `rotateY(${i * (360 / len)}deg) translateZ(${this.radius}px)`;\n      dom.style.transition = \"transform 1s\";\n      dom.style.transitionDelay = delayTime || (len - i) / 4 + \"s\";\n    },\n    init_photo(delayTime) {\n      const spinBox = this.$refs.spinBox;\n      const spinBox2 = this.$refs.spinBox2;\n      const spinBox3 = this.$refs.spinBox3;\n      const aImg = [...spinBox.getElementsByTagName(\"img\")];\n      const aImg2 = [...spinBox2.getElementsByTagName(\"img\")];\n      const aImg3 = [...spinBox3.getElementsByTagName(\"img\")];\n      aImg.forEach((img, i) => this.setStyle(delayTime, img, i, aImg.length));\n      aImg2.forEach((img, i) => this.setStyle(delayTime, img, i, aImg2.length));\n      aImg3.forEach((img, i) => this.setStyle(delayTime, img, i, aImg3.length));\n    },\n    playSpin(yes) {\n      const spinBox = this.$refs.spinBox;\n      spinBox.style.animationPlayState = yes ? \"running\" : \"paused\";\n    },\n    changeRotate(obj) {\n      if (this.tY > 180) this.tY = 180;\n      if (this.tY < 0) this.tY = 0;\n      obj.style.transform = `rotateX(${-this.tY}deg) rotateY(${this.tX}deg)`;\n    },\n    handleWheel(event) {\n      const e = event || window.event;\n      const d = e.wheelDelta / 20 || -e.detail;\n      this.radius += d;\n      this.init_photo(1);\n    },\n    handlePointerDown(event) {\n      const outDom = this.$refs.dragBox;\n      clearInterval(this.outDomTimer);\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n      const pointerMoveHandler = e => {\n        this.playSpin(false);\n        this.desX = e.clientX - this.startX;\n        this.desY = e.clientY - this.startY;\n        this.tX += this.desX * 0.1;\n        this.tY += this.desY * 0.1;\n        this.changeRotate(outDom);\n        this.startX = e.clientX;\n        this.startY = e.clientY;\n      };\n      const pointerUpHandler = () => {\n        this.outDomTimer = setInterval(() => {\n          this.desX *= 0.95;\n          this.desY *= 0.95;\n          this.tX += this.desX * 0.1;\n          this.tY += this.desY * 0.1;\n          this.changeRotate(outDom);\n          this.playSpin(false);\n          if (Math.abs(this.desX) < 0.5 && Math.abs(this.desY) < 0.5) {\n            clearInterval(this.outDomTimer);\n            this.playSpin(true);\n          }\n        }, 16);\n        document.removeEventListener(\"pointermove\", pointerMoveHandler);\n        document.removeEventListener(\"pointerup\", pointerUpHandler);\n      };\n      document.addEventListener(\"pointermove\", pointerMoveHandler);\n      document.addEventListener(\"pointerup\", pointerUpHandler);\n    },\n    loadAudio(id) {\n      console.log('loadAudio', id);\n\n      // 确保 musicList 存在并且 id 合法\n      const file = this.musicList[id - 1]?.url;\n      if (!file) {\n        console.error('Invalid audio ID:', id);\n        return;\n      }\n      const loader = new THREE.AudioLoader();\n\n      // 使用箭头函数保留 `this` 的上下文\n      loader.load(file, buffer => {\n        if (!this.audio) {\n          console.error('Audio object not initialized!');\n          return;\n        }\n        this.audio.setBuffer(buffer);\n        this.audio.play();\n        // 初始化 AudioAnalyser\n        this.analyser = new THREE.AudioAnalyser(this.audio, this.fftSize);\n\n        // 调用 init 方法\n        this.init();\n      }, undefined,\n      // onProgress 可选回调\n      error => {\n        console.error('Audio loading error:', error);\n      });\n    },\n    animate(time) {\n      // 获取音频频率数据\n      this.analyser.getFrequencyData();\n\n      // 更新 uniforms 数据\n      this.uniforms.tAudioData.value.needsUpdate = true;\n      this.step = (this.step + 1) % 1000;\n      this.uniforms.time.value = time;\n      this.uniforms.step.value = this.step;\n\n      // 渲染场景\n      this.composer.render();\n\n      // 请求下一帧\n      requestAnimationFrame(this.animate);\n    },\n    addTree(scene, uniforms, totalPoints, treePosition) {\n      const vertexShader = `\n      attribute float mIndex;\n      varying vec3 vColor;\n      varying float opacity;\n      uniform sampler2D tAudioData;\n\n      float norm(float value, float min, float max ){\n        return (value - min) / (max - min);\n      }\n      float lerp(float norm, float min, float max){\n        return (max - min) * norm + min;\n      }\n\n      float map(float value, float sourceMin, float sourceMax, float destMin, float destMax){\n        return lerp(norm(value, sourceMin, sourceMax), destMin, destMax);\n      }\n\n      void main() {\n        vColor = color;\n        vec3 p = position;\n        vec4 mvPosition = modelViewMatrix * vec4(p, 1.0);\n        float amplitude = texture2D(tAudioData, vec2(mIndex, 0.1)).r;\n        float amplitudeClamped = clamp(amplitude - 0.4, 0.0, 0.6);\n        float sizeMapped = map(amplitudeClamped, 0.0, 0.6, 1.0, 20.0);\n        opacity = map(mvPosition.z, -200.0, 15.0, 0.0, 1.0);\n        gl_PointSize = sizeMapped * (100.0 / -mvPosition.z);\n        gl_Position = projectionMatrix * mvPosition;\n      }\n    `;\n      const fragmentShader = `\n      varying vec3 vColor;\n      varying float opacity;\n      uniform sampler2D pointTexture;\n\n      void main() {\n        gl_FragColor = vec4(vColor, opacity);\n        gl_FragColor = gl_FragColor * texture2D(pointTexture, gl_PointCoord);\n      }\n    `;\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          ...uniforms,\n          pointTexture: {\n            value: new THREE.TextureLoader().load(`https://assets.codepen.io/3685267/spark1.png`)\n          }\n        },\n        vertexShader,\n        fragmentShader,\n        blending: THREE.AdditiveBlending,\n        depthTest: false,\n        transparent: true,\n        vertexColors: true\n      });\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const sizes = [];\n      const phases = [];\n      const mIndexs = [];\n      const color = new THREE.Color();\n      for (let i = 0; i < totalPoints; i++) {\n        const t = Math.random();\n        const y = this.map(t, 0, 1, -8, 10);\n        const ang = this.map(t, 0, 1, 0, 12 * Math.PI) + Math.PI / 2 * (i % 2);\n        const [z, x] = this.polar(ang, this.map(t, 0, 1, 5, 0));\n        const modifier = this.map(t, 0, 1, 1, 0);\n        positions.push(x + this.rand(-0.3 * modifier, 0.3 * modifier));\n        positions.push(y + this.rand(-0.3 * modifier, 0.3 * modifier));\n        positions.push(z + this.rand(-0.3 * modifier, 0.3 * modifier));\n        color.setHSL(this.map(i, 0, totalPoints, 1.0, 0.0), 1.0, 0.5);\n        colors.push(color.r, color.g, color.b);\n        phases.push(this.rand(1000));\n        sizes.push(1);\n        mIndexs.push(this.map(i, 0, totalPoints, 1.0, 0.0));\n      }\n      geometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(positions, 3).setUsage(THREE.DynamicDrawUsage));\n      geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n      geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n      geometry.setAttribute(\"phase\", new THREE.Float32BufferAttribute(phases, 1));\n      geometry.setAttribute(\"mIndex\", new THREE.Float32BufferAttribute(mIndexs, 1));\n      const tree = new THREE.Points(geometry, shaderMaterial);\n      const [px, py, pz] = treePosition;\n      tree.position.set(px, py, pz);\n      scene.add(tree);\n    },\n    addSnow(scene, uniforms) {\n      const vertexShader = `\n      attribute float size;\n      attribute float phase;\n      attribute float phaseSecondary;\n\n      varying vec3 vColor;\n      varying float opacity;\n\n      uniform float time;\n      uniform float step;\n\n      float norm(float value, float min, float max ){\n        return (value - min) / (max - min);\n      }\n      float lerp(float norm, float min, float max){\n        return (max - min) * norm + min;\n      }\n      float map(float value, float sourceMin, float sourceMax, float destMin, float destMax){\n        return lerp(norm(value, sourceMin, sourceMax), destMin, destMax);\n      }\n      void main() {\n        float t = time * 0.0006;\n        vColor = color;\n\n        vec3 p = position;\n\n        p.y = map(mod(phase + step, 1000.0), 0.0, 1000.0, 25.0, -8.0);\n\n        p.x += sin(t + phase);\n        p.z += sin(t + phaseSecondary);\n\n        opacity = map(p.z, -150.0, 15.0, 0.0, 1.0);\n\n        vec4 mvPosition = modelViewMatrix * vec4(p, 1.0);\n\n        gl_PointSize = size * (100.0 / -mvPosition.z);\n\n        gl_Position = projectionMatrix * mvPosition;\n      }\n    `;\n      const fragmentShader = `\n      uniform sampler2D pointTexture;\n      varying vec3 vColor;\n      varying float opacity;\n\n      void main() {\n        gl_FragColor = vec4(vColor, opacity);\n        gl_FragColor = gl_FragColor * texture2D(pointTexture, gl_PointCoord);\n      }\n    `;\n      const createSnowSet = sprite => {\n        const totalPoints = 300;\n        const shaderMaterial = new THREE.ShaderMaterial({\n          uniforms: {\n            ...uniforms,\n            pointTexture: {\n              value: new THREE.TextureLoader().load(sprite)\n            }\n          },\n          vertexShader,\n          fragmentShader,\n          blending: THREE.AdditiveBlending,\n          depthTest: false,\n          transparent: true,\n          vertexColors: true\n        });\n        const geometry = new THREE.BufferGeometry();\n        const positions = [];\n        const colors = [];\n        const sizes = [];\n        const phases = [];\n        const phaseSecondaries = [];\n        const color = new THREE.Color();\n        for (let i = 0; i < totalPoints; i++) {\n          const [x, y, z] = [this.rand(-25, 25), 0, this.rand(-150, 15)];\n          positions.push(x, y, z);\n          color.set(this.randChoice([\"#f1d4d4\", \"#f1f6f9\", \"#eeeeee\", \"#f1f1e8\"]));\n          colors.push(color.r, color.g, color.b);\n          phases.push(this.rand(1000));\n          phaseSecondaries.push(this.rand(1000));\n          sizes.push(this.rand(4, 2));\n        }\n        geometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(positions, 3));\n        geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n        geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n        geometry.setAttribute(\"phase\", new THREE.Float32BufferAttribute(phases, 1));\n        geometry.setAttribute(\"phaseSecondary\", new THREE.Float32BufferAttribute(phaseSecondaries, 1));\n        const mesh = new THREE.Points(geometry, shaderMaterial);\n        scene.add(mesh);\n      };\n      const sprites = [\"https://assets.codepen.io/3685267/snowflake1.png\", \"https://assets.codepen.io/3685267/snowflake2.png\", \"https://assets.codepen.io/3685267/snowflake3.png\", \"https://assets.codepen.io/3685267/snowflake4.png\", \"https://assets.codepen.io/3685267/snowflake5.png\"];\n      sprites.forEach(sprite => {\n        createSnowSet(sprite);\n      });\n    },\n    init() {\n      this.buttonsVisible = false;\n      this.scene = new THREE.Scene();\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      // 将渲染器的DOM元素添加到容器\n      this.$refs.canvasContainer.appendChild(this.renderer.domElement);\n      this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\n      this.camera.position.set(-0.09397456774197047, -2.5597086635726947, 24.420789670889008);\n      this.camera.rotation.set(0.10443543723052419, -0.003827152981119352, 0.0004011488708739715);\n      const format = this.renderer.capabilities.isWebGL2 ? THREE.RedFormat : THREE.LuminanceFormat;\n      this.uniforms.tAudioData = {\n        value: new THREE.DataTexture(this.analyser.data, this.fftSize / 2, 1, format)\n      };\n      this.addPlane(this.scene, this.uniforms, 3000);\n      this.addSnow(this.scene, this.uniforms);\n      Array.from({\n        length: 10\n      }).forEach((_, i) => {\n        this.addTree(this.scene, this.uniforms, this.totalPoints, [20, 0, -20 * i]);\n        this.addTree(this.scene, this.uniforms, this.totalPoints, [-20, 0, -20 * i]);\n      });\n      const renderScene = new RenderPass(this.scene, this.camera);\n      const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), this.params.bloomStrength, this.params.bloomRadius, 0.85);\n      bloomPass.threshold = this.params.bloomThreshold;\n      this.composer = new EffectComposer(this.renderer);\n      this.composer.addPass(renderScene);\n      this.composer.addPass(bloomPass);\n      this.addListeners(this.camera, this.renderer, this.composer);\n      this.animate();\n    },\n    addListeners(camera, renderer, composer) {\n      // 监听键盘事件\n      document.addEventListener(\"keydown\", e => {\n        const {\n          x,\n          y,\n          z\n        } = camera.position;\n        console.log(`camera.position.set(${x}, ${y}, ${z})`);\n        const {\n          x: a,\n          y: b,\n          z: c\n        } = camera.rotation;\n        console.log(`camera.rotation.set(${a}, ${b}, ${c})`);\n      });\n\n      // 监听窗口大小变化事件\n      window.addEventListener(\"resize\", () => {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n        composer.setSize(width, height);\n      });\n    },\n    addPlane(scene, uniforms, totalPoints) {\n      const vertexShader = `\n      attribute float size;\n      attribute vec3 customColor;\n      varying vec3 vColor;\n\n      void main() {\n        vColor = customColor;\n        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n        gl_PointSize = size * ( 300.0 / -mvPosition.z );\n        gl_Position = projectionMatrix * mvPosition;\n      }\n    `;\n      const fragmentShader = `\n      uniform vec3 color;\n      uniform sampler2D pointTexture;\n      varying vec3 vColor;\n\n      void main() {\n        gl_FragColor = vec4( vColor, 1.0 );\n        gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n      }\n    `;\n\n      // 创建 ShaderMaterial\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          ...uniforms,\n          pointTexture: {\n            value: new THREE.TextureLoader().load(`https://assets.codepen.io/3685267/spark1.png`)\n          }\n        },\n        vertexShader,\n        fragmentShader,\n        blending: THREE.AdditiveBlending,\n        depthTest: false,\n        transparent: true,\n        vertexColors: true\n      });\n\n      // 创建 BufferGeometry\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const sizes = [];\n      const color = new THREE.Color();\n      for (let i = 0; i < totalPoints; i++) {\n        const [x, y, z] = [this.rand(-25, 25), 0, this.rand(-150, 15)];\n        positions.push(x, y, z);\n        color.set(this.randChoice([\"#93abd3\", \"#f2f4c0\", \"#9ddfd3\"]));\n        colors.push(color.r, color.g, color.b);\n        sizes.push(1);\n      }\n      geometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(positions, 3).setUsage(THREE.DynamicDrawUsage));\n      geometry.setAttribute(\"customColor\", new THREE.Float32BufferAttribute(colors, 3));\n      geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n\n      // 创建 Points 并添加到场景\n      const plane = new THREE.Points(geometry, shaderMaterial);\n      plane.position.y = -8;\n      scene.add(plane);\n    },\n    rand(max, min = 0) {\n      return min + Math.random() * (max - min);\n    },\n    randChoice(arr) {\n      return arr[Math.floor(Math.random() * arr.length)];\n    },\n    // 映射函数\n    map(value, sMin, sMax, dMin, dMax) {\n      return dMin + (value - sMin) / (sMax - sMin) * (dMax - dMin);\n    },\n    // 生成范围数组\n    range(n, m = 0) {\n      return Array(n).fill(m).map((_, j) => m + j);\n    },\n    // 随机数生成器\n    rand(max, min = 0) {\n      return min + Math.random() * (max - min);\n    },\n    randInt(max, min = 0) {\n      return Math.floor(min + Math.random() * (max - min));\n    },\n    randChoice(arr) {\n      return arr[this.randInt(arr.length)];\n    },\n    // 极坐标转换\n    polar(ang, r = 1) {\n      return [r * Math.cos(ang), r * Math.sin(ang)];\n    },\n    // 初始化Three.js场景\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.camera.position.z = 5;\n      this.renderer = new THREE.WebGLRenderer({\n        canvas: this.$refs.canvas\n      });\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.listener = new THREE.AudioListener();\n      this.audio = new THREE.Audio(this.listener);\n    }\n  },\n  components: {}\n};","map":{"version":3,"names":["THREE","music1","RenderPass","EffectComposer","UnrealBloomPass","name","mounted","initScene","init_photo","document","addEventListener","handleWheel","handlePointerDown","data","radius","basePath","images1","Array","fill","images2","images3","tX","tY","desX","desY","startX","startY","outDomTimer","loading","buttonsVisible","music","musicList","id","url","PI","Math","TAU","scene","camera","renderer","analyser","step","uniforms","time","type","value","params","exposure","bloomStrength","bloomThreshold","bloomRadius","composer","fftSize","totalPoints","listener","audio","methods","setStyle","delayTime","dom","i","len","style","transform","transition","transitionDelay","spinBox","$refs","spinBox2","spinBox3","aImg","getElementsByTagName","aImg2","aImg3","forEach","img","length","playSpin","yes","animationPlayState","changeRotate","obj","event","e","window","d","wheelDelta","detail","outDom","dragBox","clearInterval","clientX","clientY","pointerMoveHandler","pointerUpHandler","setInterval","abs","removeEventListener","loadAudio","console","log","file","error","loader","AudioLoader","load","buffer","setBuffer","play","AudioAnalyser","init","undefined","animate","getFrequencyData","tAudioData","needsUpdate","render","requestAnimationFrame","addTree","treePosition","vertexShader","fragmentShader","shaderMaterial","ShaderMaterial","pointTexture","TextureLoader","blending","AdditiveBlending","depthTest","transparent","vertexColors","geometry","BufferGeometry","positions","colors","sizes","phases","mIndexs","color","Color","t","random","y","map","ang","z","x","polar","modifier","push","rand","setHSL","r","g","b","setAttribute","Float32BufferAttribute","setUsage","DynamicDrawUsage","tree","Points","px","py","pz","position","set","add","addSnow","createSnowSet","sprite","phaseSecondaries","randChoice","mesh","sprites","Scene","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","canvasContainer","appendChild","domElement","PerspectiveCamera","rotation","format","capabilities","isWebGL2","RedFormat","LuminanceFormat","DataTexture","addPlane","from","_","renderScene","bloomPass","Vector2","threshold","addPass","addListeners","a","c","width","height","aspect","updateProjectionMatrix","plane","max","min","arr","floor","sMin","sMax","dMin","dMax","range","n","m","j","randInt","cos","sin","canvas","AudioListener","Audio","components"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\" ref=\"canvasContainer\">\n\n    <div v-if=\"buttonsVisible\">\n      <!-- <h1>请宝宝选择一个音乐！</h1> -->\n      <el-button v-for=\"item in musicList\" :key=\"item.id\" @click=\"loadAudio(item.id)\" type=\"primary\">{{ item.name\n        }}</el-button>\n    </div>\n    <div id=\"dragBox\" ref=\"dragBox\">\n      <!-- 第一层 spinBox -->\n      <div class=\"spinBox\" ref=\"spinBox\">\n        <img v-for=\"(img, index) in images1\" :key=\"'spinBox1-' + index\" :src=\"img\" alt=\"spin image\" />\n      </div>\n      <!-- 第二层 spinBox -->\n      <div class=\"spinBox\" ref=\"spinBox2\">\n        <img v-for=\"(img, index) in images2\" :key=\"'spinBox2-' + index\" :src=\"img\" alt=\"spin image\" />\n      </div>\n      <!-- 第三层 spinBox -->\n      <div class=\"spinBox\" ref=\"spinBox3\">\n        <img v-for=\"(img, index) in images3\" :key=\"'spinBox3-' + index\" :src=\"img\" alt=\"spin image\" />\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\n\nimport * as THREE from 'three';\nimport music1 from '@/assets/thisisus.mp3'; // 使用别名导入资源，@ 通常指向 src\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nexport default {\n  name: 'HomeView',\n  mounted() {\n    this.initScene();\n    this.init_photo();\n    document.addEventListener(\"mousewheel\", this.handleWheel);\n    document.addEventListener(\"pointerdown\", this.handlePointerDown);\n    // // 动画循环\n    // const animate = () => {\n    //   requestAnimationFrame(animate);\n    //   this.uniforms.time.value += 0.05;\n    //   this.renderer.render(this.scene, this.camera);\n    // };\n\n  },\n  data() {\n    return {\n      radius: 560,\n      // 所有图片路径相同，保持与原有数量一致\n      basePath: \"https://joes-bucket.oss-cn-shanghai.aliyuncs.com/img/IMG_2581.JPG\",\n      images1: Array(20).fill(\"https://joes-bucket.oss-cn-shanghai.aliyuncs.com/img/IMG_2581.JPG\"),\n      images2: Array(21).fill(\"https://joes-bucket.oss-cn-shanghai.aliyuncs.com/img/IMG_2581.JPG\"),\n      images3: Array(22).fill(\"https://joes-bucket.oss-cn-shanghai.aliyuncs.com/img/IMG_2581.JPG\"),\n      tX: 0,\n      tY: 10,\n      desX: 0,\n      desY: 0,\n      startX: 0,\n      startY: 0,\n      outDomTimer: null,\n      loading: false,\n      buttonsVisible: true,\n      music: null,\n      musicList: [\n        {\n          id: 1,\n          name: 'music1',\n          url: music1\n        },\n        {\n          id: 2,\n          name: 'music2',\n          url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3'\n        },\n        {\n          id: 3,\n          name: 'music3',\n          url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3'\n        }\n      ],\n      PI: Math.PI,\n      TAU: 2 * Math.PI,\n      scene: null,\n      camera: null,\n      renderer: null,\n      analyser: null,\n      step: 0,\n      uniforms: {\n        time: { type: \"f\", value: 0.0 },\n        step: { type: \"f\", value: 0.0 },\n      },\n      params: {\n        exposure: 1,\n        bloomStrength: 0.9,\n        bloomThreshold: 0,\n        bloomRadius: 0.5,\n      },\n      composer: null,\n      fftSize: 2048,\n      totalPoints: 4000,\n      listener: null,\n      audio: null,\n\n    }\n  },\n  methods: {\n    setStyle(delayTime, dom, i, len) {\n      dom.style.transform = `rotateY(${i * (360 / len)}deg) translateZ(${this.radius}px)`;\n      dom.style.transition = \"transform 1s\";\n      dom.style.transitionDelay = delayTime || (len - i) / 4 + \"s\";\n    },\n    init_photo(delayTime) {\n      const spinBox = this.$refs.spinBox;\n      const spinBox2 = this.$refs.spinBox2;\n      const spinBox3 = this.$refs.spinBox3;\n\n      const aImg = [...spinBox.getElementsByTagName(\"img\")];\n      const aImg2 = [...spinBox2.getElementsByTagName(\"img\")];\n      const aImg3 = [...spinBox3.getElementsByTagName(\"img\")];\n\n      aImg.forEach((img, i) => this.setStyle(delayTime, img, i, aImg.length));\n      aImg2.forEach((img, i) => this.setStyle(delayTime, img, i, aImg2.length));\n      aImg3.forEach((img, i) => this.setStyle(delayTime, img, i, aImg3.length));\n    },\n    playSpin(yes) {\n      const spinBox = this.$refs.spinBox;\n      spinBox.style.animationPlayState = yes ? \"running\" : \"paused\";\n    },\n    changeRotate(obj) {\n      if (this.tY > 180) this.tY = 180;\n      if (this.tY < 0) this.tY = 0;\n      obj.style.transform = `rotateX(${-this.tY}deg) rotateY(${this.tX}deg)`;\n    },\n    handleWheel(event) {\n      const e = event || window.event;\n      const d = e.wheelDelta / 20 || -e.detail;\n      this.radius += d;\n      this.init_photo(1);\n    },\n    handlePointerDown(event) {\n      const outDom = this.$refs.dragBox;\n\n      clearInterval(this.outDomTimer);\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n\n      const pointerMoveHandler = (e) => {\n        this.playSpin(false);\n        this.desX = e.clientX - this.startX;\n        this.desY = e.clientY - this.startY;\n        this.tX += this.desX * 0.1;\n        this.tY += this.desY * 0.1;\n        this.changeRotate(outDom);\n        this.startX = e.clientX;\n        this.startY = e.clientY;\n      };\n\n      const pointerUpHandler = () => {\n        this.outDomTimer = setInterval(() => {\n          this.desX *= 0.95;\n          this.desY *= 0.95;\n          this.tX += this.desX * 0.1;\n          this.tY += this.desY * 0.1;\n          this.changeRotate(outDom);\n          this.playSpin(false);\n          if (Math.abs(this.desX) < 0.5 && Math.abs(this.desY) < 0.5) {\n            clearInterval(this.outDomTimer);\n            this.playSpin(true);\n          }\n        }, 16);\n\n        document.removeEventListener(\"pointermove\", pointerMoveHandler);\n        document.removeEventListener(\"pointerup\", pointerUpHandler);\n      };\n\n      document.addEventListener(\"pointermove\", pointerMoveHandler);\n      document.addEventListener(\"pointerup\", pointerUpHandler);\n    },\n    loadAudio(id) {\n      console.log('loadAudio', id);\n\n      // 确保 musicList 存在并且 id 合法\n      const file = this.musicList[id - 1]?.url;\n      if (!file) {\n        console.error('Invalid audio ID:', id);\n        return;\n      }\n\n      const loader = new THREE.AudioLoader();\n\n      // 使用箭头函数保留 `this` 的上下文\n      loader.load(\n        file,\n        (buffer) => {\n          if (!this.audio) {\n            console.error('Audio object not initialized!');\n            return;\n          }\n          this.audio.setBuffer(buffer);\n          this.audio.play();\n          // 初始化 AudioAnalyser\n          this.analyser = new THREE.AudioAnalyser(this.audio, this.fftSize);\n\n          // 调用 init 方法\n          this.init();\n        },\n        undefined, // onProgress 可选回调\n        (error) => {\n          console.error('Audio loading error:', error);\n        }\n      );\n    },\n    animate(time) {\n      // 获取音频频率数据\n      this.analyser.getFrequencyData();\n\n      // 更新 uniforms 数据\n      this.uniforms.tAudioData.value.needsUpdate = true;\n      this.step = (this.step + 1) % 1000;\n      this.uniforms.time.value = time;\n      this.uniforms.step.value = this.step;\n\n      // 渲染场景\n      this.composer.render();\n\n      // 请求下一帧\n      requestAnimationFrame(this.animate);\n    },\n    addTree(scene, uniforms, totalPoints, treePosition) {\n      const vertexShader = `\n      attribute float mIndex;\n      varying vec3 vColor;\n      varying float opacity;\n      uniform sampler2D tAudioData;\n\n      float norm(float value, float min, float max ){\n        return (value - min) / (max - min);\n      }\n      float lerp(float norm, float min, float max){\n        return (max - min) * norm + min;\n      }\n\n      float map(float value, float sourceMin, float sourceMax, float destMin, float destMax){\n        return lerp(norm(value, sourceMin, sourceMax), destMin, destMax);\n      }\n\n      void main() {\n        vColor = color;\n        vec3 p = position;\n        vec4 mvPosition = modelViewMatrix * vec4(p, 1.0);\n        float amplitude = texture2D(tAudioData, vec2(mIndex, 0.1)).r;\n        float amplitudeClamped = clamp(amplitude - 0.4, 0.0, 0.6);\n        float sizeMapped = map(amplitudeClamped, 0.0, 0.6, 1.0, 20.0);\n        opacity = map(mvPosition.z, -200.0, 15.0, 0.0, 1.0);\n        gl_PointSize = sizeMapped * (100.0 / -mvPosition.z);\n        gl_Position = projectionMatrix * mvPosition;\n      }\n    `;\n\n      const fragmentShader = `\n      varying vec3 vColor;\n      varying float opacity;\n      uniform sampler2D pointTexture;\n\n      void main() {\n        gl_FragColor = vec4(vColor, opacity);\n        gl_FragColor = gl_FragColor * texture2D(pointTexture, gl_PointCoord);\n      }\n    `;\n\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          ...uniforms,\n          pointTexture: {\n            value: new THREE.TextureLoader().load(\n              `https://assets.codepen.io/3685267/spark1.png`\n            ),\n          },\n        },\n        vertexShader,\n        fragmentShader,\n        blending: THREE.AdditiveBlending,\n        depthTest: false,\n        transparent: true,\n        vertexColors: true,\n      });\n\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const sizes = [];\n      const phases = [];\n      const mIndexs = [];\n      const color = new THREE.Color();\n\n      for (let i = 0; i < totalPoints; i++) {\n        const t = Math.random();\n        const y = this.map(t, 0, 1, -8, 10);\n        const ang = this.map(t, 0, 1, 0, 12 * Math.PI) + (Math.PI / 2) * (i % 2);\n        const [z, x] = this.polar(ang, this.map(t, 0, 1, 5, 0));\n\n        const modifier = this.map(t, 0, 1, 1, 0);\n        positions.push(x + this.rand(-0.3 * modifier, 0.3 * modifier));\n        positions.push(y + this.rand(-0.3 * modifier, 0.3 * modifier));\n        positions.push(z + this.rand(-0.3 * modifier, 0.3 * modifier));\n\n        color.setHSL(this.map(i, 0, totalPoints, 1.0, 0.0), 1.0, 0.5);\n        colors.push(color.r, color.g, color.b);\n        phases.push(this.rand(1000));\n        sizes.push(1);\n        mIndexs.push(this.map(i, 0, totalPoints, 1.0, 0.0));\n      }\n\n      geometry.setAttribute(\n        \"position\",\n        new THREE.Float32BufferAttribute(positions, 3).setUsage(\n          THREE.DynamicDrawUsage\n        )\n      );\n      geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n      geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n      geometry.setAttribute(\"phase\", new THREE.Float32BufferAttribute(phases, 1));\n      geometry.setAttribute(\"mIndex\", new THREE.Float32BufferAttribute(mIndexs, 1));\n\n      const tree = new THREE.Points(geometry, shaderMaterial);\n\n      const [px, py, pz] = treePosition;\n      tree.position.set(px, py, pz);\n\n      scene.add(tree);\n    },\n    addSnow(scene, uniforms) {\n      const vertexShader = `\n      attribute float size;\n      attribute float phase;\n      attribute float phaseSecondary;\n\n      varying vec3 vColor;\n      varying float opacity;\n\n      uniform float time;\n      uniform float step;\n\n      float norm(float value, float min, float max ){\n        return (value - min) / (max - min);\n      }\n      float lerp(float norm, float min, float max){\n        return (max - min) * norm + min;\n      }\n      float map(float value, float sourceMin, float sourceMax, float destMin, float destMax){\n        return lerp(norm(value, sourceMin, sourceMax), destMin, destMax);\n      }\n      void main() {\n        float t = time * 0.0006;\n        vColor = color;\n\n        vec3 p = position;\n\n        p.y = map(mod(phase + step, 1000.0), 0.0, 1000.0, 25.0, -8.0);\n\n        p.x += sin(t + phase);\n        p.z += sin(t + phaseSecondary);\n\n        opacity = map(p.z, -150.0, 15.0, 0.0, 1.0);\n\n        vec4 mvPosition = modelViewMatrix * vec4(p, 1.0);\n\n        gl_PointSize = size * (100.0 / -mvPosition.z);\n\n        gl_Position = projectionMatrix * mvPosition;\n      }\n    `;\n\n      const fragmentShader = `\n      uniform sampler2D pointTexture;\n      varying vec3 vColor;\n      varying float opacity;\n\n      void main() {\n        gl_FragColor = vec4(vColor, opacity);\n        gl_FragColor = gl_FragColor * texture2D(pointTexture, gl_PointCoord);\n      }\n    `;\n\n      const createSnowSet = (sprite) => {\n        const totalPoints = 300;\n        const shaderMaterial = new THREE.ShaderMaterial({\n          uniforms: {\n            ...uniforms,\n            pointTexture: {\n              value: new THREE.TextureLoader().load(sprite),\n            },\n          },\n          vertexShader,\n          fragmentShader,\n          blending: THREE.AdditiveBlending,\n          depthTest: false,\n          transparent: true,\n          vertexColors: true,\n        });\n\n        const geometry = new THREE.BufferGeometry();\n        const positions = [];\n        const colors = [];\n        const sizes = [];\n        const phases = [];\n        const phaseSecondaries = [];\n        const color = new THREE.Color();\n\n        for (let i = 0; i < totalPoints; i++) {\n          const [x, y, z] = [this.rand(-25, 25), 0, this.rand(-150, 15)];\n          positions.push(x, y, z);\n\n          color.set(this.randChoice([\"#f1d4d4\", \"#f1f6f9\", \"#eeeeee\", \"#f1f1e8\"]));\n          colors.push(color.r, color.g, color.b);\n\n          phases.push(this.rand(1000));\n          phaseSecondaries.push(this.rand(1000));\n          sizes.push(this.rand(4, 2));\n        }\n\n        geometry.setAttribute(\n          \"position\",\n          new THREE.Float32BufferAttribute(positions, 3)\n        );\n        geometry.setAttribute(\n          \"color\",\n          new THREE.Float32BufferAttribute(colors, 3)\n        );\n        geometry.setAttribute(\n          \"size\",\n          new THREE.Float32BufferAttribute(sizes, 1)\n        );\n        geometry.setAttribute(\n          \"phase\",\n          new THREE.Float32BufferAttribute(phases, 1)\n        );\n        geometry.setAttribute(\n          \"phaseSecondary\",\n          new THREE.Float32BufferAttribute(phaseSecondaries, 1)\n        );\n\n        const mesh = new THREE.Points(geometry, shaderMaterial);\n        scene.add(mesh);\n      };\n\n      const sprites = [\n        \"https://assets.codepen.io/3685267/snowflake1.png\",\n        \"https://assets.codepen.io/3685267/snowflake2.png\",\n        \"https://assets.codepen.io/3685267/snowflake3.png\",\n        \"https://assets.codepen.io/3685267/snowflake4.png\",\n        \"https://assets.codepen.io/3685267/snowflake5.png\",\n      ];\n\n      sprites.forEach((sprite) => {\n        createSnowSet(sprite);\n      });\n    },\n    init() {\n      this.buttonsVisible = false\n      this.scene = new THREE.Scene();\n      this.renderer = new THREE.WebGLRenderer({ antialias: true });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      // 将渲染器的DOM元素添加到容器\n      this.$refs.canvasContainer.appendChild(this.renderer.domElement);\n      this.camera = new THREE.PerspectiveCamera(\n        60,\n        window.innerWidth / window.innerHeight,\n        1,\n        1000\n      );\n      this.camera.position.set(\n        -0.09397456774197047,\n        -2.5597086635726947,\n        24.420789670889008\n      );\n      this.camera.rotation.set(\n        0.10443543723052419,\n        -0.003827152981119352,\n        0.0004011488708739715\n      );\n\n      const format = this.renderer.capabilities.isWebGL2\n        ? THREE.RedFormat\n        : THREE.LuminanceFormat;\n\n      this.uniforms.tAudioData = {\n        value: new THREE.DataTexture(this.analyser.data, this.fftSize / 2, 1, format),\n      };\n\n      this.addPlane(this.scene, this.uniforms, 3000);\n      this.addSnow(this.scene, this.uniforms);\n\n      Array.from({ length: 10 }).forEach((_, i) => {\n        this.addTree(this.scene, this.uniforms, this.totalPoints, [20, 0, -20 * i]);\n        this.addTree(this.scene, this.uniforms, this.totalPoints, [-20, 0, -20 * i]);\n      });\n\n      const renderScene = new RenderPass(this.scene, this.camera);\n\n      const bloomPass = new UnrealBloomPass(\n        new THREE.Vector2(window.innerWidth, window.innerHeight),\n        this.params.bloomStrength,\n        this.params.bloomRadius,\n        0.85\n      );\n\n      bloomPass.threshold = this.params.bloomThreshold;\n\n      this.composer = new EffectComposer(this.renderer);\n      this.composer.addPass(renderScene);\n      this.composer.addPass(bloomPass);\n\n      this.addListeners(this.camera, this.renderer, this.composer);\n      this.animate();\n    },\n    addListeners(camera, renderer, composer) {\n      // 监听键盘事件\n      document.addEventListener(\"keydown\", (e) => {\n        const { x, y, z } = camera.position;\n        console.log(`camera.position.set(${x}, ${y}, ${z})`);\n        const { x: a, y: b, z: c } = camera.rotation;\n        console.log(`camera.rotation.set(${a}, ${b}, ${c})`);\n      });\n\n      // 监听窗口大小变化事件\n      window.addEventListener(\"resize\", () => {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n\n        renderer.setSize(width, height);\n        composer.setSize(width, height);\n      });\n    },\n    addPlane(scene, uniforms, totalPoints) {\n      const vertexShader = `\n      attribute float size;\n      attribute vec3 customColor;\n      varying vec3 vColor;\n\n      void main() {\n        vColor = customColor;\n        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n        gl_PointSize = size * ( 300.0 / -mvPosition.z );\n        gl_Position = projectionMatrix * mvPosition;\n      }\n    `;\n\n      const fragmentShader = `\n      uniform vec3 color;\n      uniform sampler2D pointTexture;\n      varying vec3 vColor;\n\n      void main() {\n        gl_FragColor = vec4( vColor, 1.0 );\n        gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n      }\n    `;\n\n      // 创建 ShaderMaterial\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          ...uniforms,\n          pointTexture: {\n            value: new THREE.TextureLoader().load(\n              `https://assets.codepen.io/3685267/spark1.png`\n            ),\n          },\n        },\n        vertexShader,\n        fragmentShader,\n        blending: THREE.AdditiveBlending,\n        depthTest: false,\n        transparent: true,\n        vertexColors: true,\n      });\n\n      // 创建 BufferGeometry\n      const geometry = new THREE.BufferGeometry();\n      const positions = [];\n      const colors = [];\n      const sizes = [];\n      const color = new THREE.Color();\n\n      for (let i = 0; i < totalPoints; i++) {\n        const [x, y, z] = [this.rand(-25, 25), 0, this.rand(-150, 15)];\n        positions.push(x, y, z);\n\n        color.set(this.randChoice([\"#93abd3\", \"#f2f4c0\", \"#9ddfd3\"]));\n        colors.push(color.r, color.g, color.b);\n\n        sizes.push(1);\n      }\n\n      geometry.setAttribute(\n        \"position\",\n        new THREE.Float32BufferAttribute(positions, 3).setUsage(\n          THREE.DynamicDrawUsage\n        )\n      );\n      geometry.setAttribute(\n        \"customColor\",\n        new THREE.Float32BufferAttribute(colors, 3)\n      );\n      geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n\n      // 创建 Points 并添加到场景\n      const plane = new THREE.Points(geometry, shaderMaterial);\n      plane.position.y = -8;\n      scene.add(plane);\n    },\n    rand(max, min = 0) {\n      return min + Math.random() * (max - min);\n    },\n    randChoice(arr) {\n      return arr[Math.floor(Math.random() * arr.length)];\n    },\n    // 映射函数\n    map(value, sMin, sMax, dMin, dMax) {\n      return dMin + ((value - sMin) / (sMax - sMin)) * (dMax - dMin);\n    },\n    // 生成范围数组\n    range(n, m = 0) {\n      return Array(n)\n        .fill(m)\n        .map((_, j) => m + j);\n    },\n    // 随机数生成器\n    rand(max, min = 0) {\n      return min + Math.random() * (max - min);\n    },\n    randInt(max, min = 0) {\n      return Math.floor(min + Math.random() * (max - min));\n    },\n    randChoice(arr) {\n      return arr[this.randInt(arr.length)];\n    },\n    // 极坐标转换\n    polar(ang, r = 1) {\n      return [r * Math.cos(ang), r * Math.sin(ang)];\n    },\n    // 初始化Three.js场景\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      this.camera.position.z = 5;\n\n      this.renderer = new THREE.WebGLRenderer({ canvas: this.$refs.canvas });\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n      this.listener = new THREE.AudioListener();\n      this.audio = new THREE.Audio(this.listener);\n    }\n  },\n  components: {\n\n  }\n}\n</script>\n<style scoped>\n* {\n  box-sizing: border-box;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml,\nbody {\n  height: 100%;\n  touch-action: none;\n}\n\nhtml,\nbody {\n  overflow: hidden;\n  /* 禁用滚动条 */\n  margin: 0;\n  padding: 0;\n  width: 100vw;\n  height: 100vh;\n}\n\nbody {\n  margin: 0;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #161616;\n  color: #c5a880;\n  font-family: sans-serif;\n}\n\n#dragBox,\n.spinBox {\n  position: relative;\n  display: flex;\n  margin: auto;\n  transform-style: preserve-3d;\n  transform: rotateX(-10deg);\n}\n\n#dragBox {\n  transform: rotateX(-30deg);\n}\n\n.spinBox {\n  width: 120px;\n  height: 140px;\n  animation: spin 200s infinite linear;\n}\n\n#spinBox2 {\n  position: absolute;\n  top: 120%;\n}\n\n#spinBox3 {\n  position: absolute;\n  top: -120%;\n}\n\n#dragBox img {\n  transform-style: preserve-3d;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  box-shadow: 0 0 8px #fff;\n  /* 倒影 */\n  -webkit-box-reflect: below 10px linear-gradient(transparent, transparent, #0005);\n}\n\n#dragBox img:hover {\n  box-shadow: 0 0 15px #fff;\n}\n\n/*  自动旋转 */\n@keyframes spin {\n  from {\n    transform: rotateY(0deg);\n  }\n\n  to {\n    transform: rotateY(360deg);\n  }\n}\n\nlabel {\n  display: inline-block;\n  background-color: #161616;\n  padding: 16px;\n  border-radius: 0.3rem;\n  cursor: pointer;\n  margin-top: 1rem;\n  width: 300px;\n  border-radius: 10px;\n  border: 1px solid #c5a880;\n  text-align: center;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n.btn {\n  background-color: #161616;\n  border-radius: 10px;\n  color: #c5a880;\n  border: 1px solid #c5a880;\n  padding: 16px;\n  width: 300px;\n  margin-bottom: 16px;\n  line-height: 1.5;\n  cursor: pointer;\n}\n\n.separator {\n  font-weight: bold;\n  text-align: center;\n  width: 300px;\n  margin: 16px 0px;\n  color: #a07676;\n}\n\n.title {\n  color: #a07676;\n  font-weight: bold;\n  font-size: 1.25rem;\n  margin-bottom: 16px;\n}\n\n.text-loading {\n  font-size: 2rem;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}