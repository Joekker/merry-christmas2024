{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport * as THREE from 'three';\nimport music1 from '@/assets/thisisus.mp3'; // 使用别名导入资源，@ 通常指向 src\nexport default {\n  name: 'HomeView',\n  mounted() {\n    this.initScene();\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      this.uniforms.time.value += 0.05;\n      this.renderer.render(this.scene, this.camera);\n    };\n    animate();\n    this.init(); // 初始化场景\n    this.addListeners(this.camera, this.renderer, this.composer); // 添加监听器\n  },\n  data() {\n    return {\n      loading: false,\n      buttonsVisible: true,\n      music: null,\n      musicList: [{\n        id: 1,\n        name: 'music1',\n        url: music1\n      }, {\n        id: 2,\n        name: 'music2',\n        url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3'\n      }, {\n        id: 3,\n        name: 'music3',\n        url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3'\n      }],\n      PI: Math.PI,\n      TAU: 2 * Math.PI,\n      scene: null,\n      camera: null,\n      renderer: null,\n      analyser: null,\n      step: 0,\n      uniforms: {\n        time: {\n          type: \"f\",\n          value: 0.0\n        },\n        step: {\n          type: \"f\",\n          value: 0.0\n        }\n      },\n      params: {\n        exposure: 1,\n        bloomStrength: 0.9,\n        bloomThreshold: 0,\n        bloomRadius: 0.5\n      },\n      composer: null,\n      fftSize: 2048,\n      totalPoints: 4000,\n      listener: null,\n      audio: null\n    };\n  },\n  methods: {\n    loadAudio(id) {\n      console.log('loadAudio', id);\n\n      // 确保 musicList 存在并且 id 合法\n      const file = this.musicList[id - 1]?.url;\n      if (!file) {\n        console.error('Invalid audio ID:', id);\n        return;\n      }\n      const loader = new THREE.AudioLoader();\n\n      // 使用箭头函数保留 `this` 的上下文\n      loader.load(file, buffer => {\n        if (!this.audio) {\n          console.error('Audio object not initialized!');\n          return;\n        }\n        this.audio.setBuffer(buffer);\n        this.audio.play();\n        // 初始化 AudioAnalyser\n        this.analyser = new THREE.AudioAnalyser(this.audio, this.fftSize);\n\n        // 调用 init 方法\n        this.init();\n      }, undefined,\n      // onProgress 可选回调\n      error => {\n        console.error('Audio loading error:', error);\n      });\n    },\n    init() {\n      this.buttonsVisible = false;\n      this.scene = new THREE.Scene();\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      // 将渲染器的DOM元素添加到容器\n      this.$refs.canvasContainer.appendChild(this.renderer.domElement);\n      this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\n      this.camera.position.set(-0.09397456774197047, -2.5597086635726947, 24.420789670889008);\n      this.camera.rotation.set(0.10443543723052419, -0.003827152981119352, 0.0004011488708739715);\n      const format = this.renderer.capabilities.isWebGL2 ? THREE.RedFormat : THREE.LuminanceFormat;\n      this.uniforms.tAudioData = {\n        value: new THREE.DataTexture(this.analyser.data, this.fftSize / 2, 1, format)\n      };\n      this.addPlane(this.scene, this.uniforms, 3000);\n      this.addSnow(this.scene, this.uniforms);\n      Array.from({\n        length: 10\n      }).forEach((_, i) => {\n        this.addTree(this.scene, this.uniforms, this.totalPoints, [20, 0, -20 * i]);\n        this.addTree(this.scene, this.uniforms, this.totalPoints, [-20, 0, -20 * i]);\n      });\n      const renderScene = new RenderPass(this.scene, this.camera);\n      const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), this.params.bloomStrength, this.params.bloomRadius, 0.85);\n      bloomPass.threshold = this.params.bloomThreshold;\n      this.composer = new EffectComposer(this.renderer);\n      this.composer.addPass(renderScene);\n      this.composer.addPass(bloomPass);\n      this.addListeners(this.camera, this.renderer, this.composer);\n      this.animate();\n    },\n    addListeners(camera, renderer, composer) {\n      // 监听键盘事件\n      document.addEventListener(\"keydown\", e => {\n        const {\n          x,\n          y,\n          z\n        } = camera.position;\n        console.log(`camera.position.set(${x}, ${y}, ${z})`);\n        const {\n          x: a,\n          y: b,\n          z: c\n        } = camera.rotation;\n        console.log(`camera.rotation.set(${a}, ${b}, ${c})`);\n      });\n\n      // 监听窗口大小变化事件\n      window.addEventListener(\"resize\", () => {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n        composer.setSize(width, height);\n      });\n    },\n    // 映射函数\n    map(value, sMin, sMax, dMin, dMax) {\n      return dMin + (value - sMin) / (sMax - sMin) * (dMax - dMin);\n    },\n    // 生成范围数组\n    range(n, m = 0) {\n      return Array(n).fill(m).map((_, j) => m + j);\n    },\n    // 随机数生成器\n    rand(max, min = 0) {\n      return min + Math.random() * (max - min);\n    },\n    randInt(max, min = 0) {\n      return Math.floor(min + Math.random() * (max - min));\n    },\n    randChoice(arr) {\n      return arr[this.randInt(arr.length)];\n    },\n    // 极坐标转换\n    polar(ang, r = 1) {\n      return [r * Math.cos(ang), r * Math.sin(ang)];\n    },\n    // 初始化Three.js场景\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.camera.position.z = 5;\n      this.renderer = new THREE.WebGLRenderer({\n        canvas: this.$refs.canvas\n      });\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.listener = new THREE.AudioListener();\n      this.audio = new THREE.Audio(this.listener);\n    }\n  },\n  components: {}\n};","map":{"version":3,"names":["THREE","music1","name","mounted","initScene","animate","requestAnimationFrame","uniforms","time","value","renderer","render","scene","camera","init","addListeners","composer","data","loading","buttonsVisible","music","musicList","id","url","PI","Math","TAU","analyser","step","type","params","exposure","bloomStrength","bloomThreshold","bloomRadius","fftSize","totalPoints","listener","audio","methods","loadAudio","console","log","file","error","loader","AudioLoader","load","buffer","setBuffer","play","AudioAnalyser","undefined","Scene","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","$refs","canvasContainer","appendChild","domElement","PerspectiveCamera","position","set","rotation","format","capabilities","isWebGL2","RedFormat","LuminanceFormat","tAudioData","DataTexture","addPlane","addSnow","Array","from","length","forEach","_","i","addTree","renderScene","RenderPass","bloomPass","UnrealBloomPass","Vector2","threshold","EffectComposer","addPass","document","addEventListener","e","x","y","z","a","b","c","width","height","aspect","updateProjectionMatrix","map","sMin","sMax","dMin","dMax","range","n","m","fill","j","rand","max","min","random","randInt","floor","randChoice","arr","polar","ang","r","cos","sin","canvas","AudioListener","Audio","components"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n    <div v-if=\"buttonsVisible\">\n      <!-- <h1>请宝宝选择一个音乐！</h1> -->\n      <el-button v-for=\"item in musicList\" :key=\"item.id\" @click=\"loadAudio(item.id)\" type=\"primary\">{{ item.name\n        }}</el-button>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport * as THREE from 'three';\nimport music1 from '@/assets/thisisus.mp3'; // 使用别名导入资源，@ 通常指向 src\nexport default {\n  name: 'HomeView',\n  mounted() {\n    this.initScene();\n\n    // 动画循环\n    const animate = () => {\n      requestAnimationFrame(animate);\n      this.uniforms.time.value += 0.05;\n      this.renderer.render(this.scene, this.camera);\n    };\n\n    animate();\n    this.init(); // 初始化场景\n    this.addListeners(this.camera, this.renderer, this.composer); // 添加监听器\n  },\n  data() {\n    return {\n      loading: false,\n      buttonsVisible: true,\n      music: null,\n      musicList: [\n        {\n          id: 1,\n          name: 'music1',\n          url: music1\n        },\n        {\n          id: 2,\n          name: 'music2',\n          url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3'\n        },\n        {\n          id: 3,\n          name: 'music3',\n          url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3'\n        }\n      ],\n      PI: Math.PI,\n      TAU: 2 * Math.PI,\n      scene: null,\n      camera: null,\n      renderer: null,\n      analyser: null,\n      step: 0,\n      uniforms: {\n        time: { type: \"f\", value: 0.0 },\n        step: { type: \"f\", value: 0.0 },\n      },\n      params: {\n        exposure: 1,\n        bloomStrength: 0.9,\n        bloomThreshold: 0,\n        bloomRadius: 0.5,\n      },\n      composer: null,\n      fftSize: 2048,\n      totalPoints: 4000,\n      listener: null,\n      audio: null,\n\n    }\n  },\n  methods: {\n    loadAudio(id) {\n      console.log('loadAudio', id);\n\n      // 确保 musicList 存在并且 id 合法\n      const file = this.musicList[id - 1]?.url;\n      if (!file) {\n        console.error('Invalid audio ID:', id);\n        return;\n      }\n\n      const loader = new THREE.AudioLoader();\n\n      // 使用箭头函数保留 `this` 的上下文\n      loader.load(\n        file,\n        (buffer) => {\n          if (!this.audio) {\n            console.error('Audio object not initialized!');\n            return;\n          }\n          this.audio.setBuffer(buffer);\n          this.audio.play();\n          // 初始化 AudioAnalyser\n          this.analyser = new THREE.AudioAnalyser(this.audio, this.fftSize);\n\n          // 调用 init 方法\n          this.init();\n        },\n        undefined, // onProgress 可选回调\n        (error) => {\n          console.error('Audio loading error:', error);\n        }\n      );\n    },\n    init() {\n      this.buttonsVisible = false\n      this.scene = new THREE.Scene();\n      this.renderer = new THREE.WebGLRenderer({ antialias: true });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      // 将渲染器的DOM元素添加到容器\n      this.$refs.canvasContainer.appendChild(this.renderer.domElement);\n      this.camera = new THREE.PerspectiveCamera(\n        60,\n        window.innerWidth / window.innerHeight,\n        1,\n        1000\n      );\n      this.camera.position.set(\n        -0.09397456774197047,\n        -2.5597086635726947,\n        24.420789670889008\n      );\n      this.camera.rotation.set(\n        0.10443543723052419,\n        -0.003827152981119352,\n        0.0004011488708739715\n      );\n\n      const format = this.renderer.capabilities.isWebGL2\n        ? THREE.RedFormat\n        : THREE.LuminanceFormat;\n\n      this.uniforms.tAudioData = {\n        value: new THREE.DataTexture(this.analyser.data, this.fftSize / 2, 1, format),\n      };\n\n      this.addPlane(this.scene, this.uniforms, 3000);\n      this.addSnow(this.scene, this.uniforms);\n\n      Array.from({ length: 10 }).forEach((_, i) => {\n        this.addTree(this.scene, this.uniforms, this.totalPoints, [20, 0, -20 * i]);\n        this.addTree(this.scene, this.uniforms, this.totalPoints, [-20, 0, -20 * i]);\n      });\n\n      const renderScene = new RenderPass(this.scene, this.camera);\n\n      const bloomPass = new UnrealBloomPass(\n        new THREE.Vector2(window.innerWidth, window.innerHeight),\n        this.params.bloomStrength,\n        this.params.bloomRadius,\n        0.85\n      );\n\n      bloomPass.threshold = this.params.bloomThreshold;\n\n      this.composer = new EffectComposer(this.renderer);\n      this.composer.addPass(renderScene);\n      this.composer.addPass(bloomPass);\n\n      this.addListeners(this.camera, this.renderer, this.composer);\n      this.animate();\n    },\n    addListeners(camera, renderer, composer) {\n      // 监听键盘事件\n      document.addEventListener(\"keydown\", (e) => {\n        const { x, y, z } = camera.position;\n        console.log(`camera.position.set(${x}, ${y}, ${z})`);\n        const { x: a, y: b, z: c } = camera.rotation;\n        console.log(`camera.rotation.set(${a}, ${b}, ${c})`);\n      });\n\n      // 监听窗口大小变化事件\n      window.addEventListener(\"resize\", () => {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n\n        renderer.setSize(width, height);\n        composer.setSize(width, height);\n      });\n    },\n    // 映射函数\n    map(value, sMin, sMax, dMin, dMax) {\n      return dMin + ((value - sMin) / (sMax - sMin)) * (dMax - dMin);\n    },\n    // 生成范围数组\n    range(n, m = 0) {\n      return Array(n)\n        .fill(m)\n        .map((_, j) => m + j);\n    },\n    // 随机数生成器\n    rand(max, min = 0) {\n      return min + Math.random() * (max - min);\n    },\n    randInt(max, min = 0) {\n      return Math.floor(min + Math.random() * (max - min));\n    },\n    randChoice(arr) {\n      return arr[this.randInt(arr.length)];\n    },\n    // 极坐标转换\n    polar(ang, r = 1) {\n      return [r * Math.cos(ang), r * Math.sin(ang)];\n    },\n    // 初始化Three.js场景\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      this.camera.position.z = 5;\n\n      this.renderer = new THREE.WebGLRenderer({ canvas: this.$refs.canvas });\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n      this.listener = new THREE.AudioListener();\n      this.audio = new THREE.Audio(this.listener);\n    }\n  },\n  components: {\n\n  }\n}\n</script>\n<style scoped>\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #161616;\n  color: #c5a880;\n  font-family: sans-serif;\n}\n\nlabel {\n  display: inline-block;\n  background-color: #161616;\n  padding: 16px;\n  border-radius: 0.3rem;\n  cursor: pointer;\n  margin-top: 1rem;\n  width: 300px;\n  border-radius: 10px;\n  border: 1px solid #c5a880;\n  text-align: center;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n.btn {\n  background-color: #161616;\n  border-radius: 10px;\n  color: #c5a880;\n  border: 1px solid #c5a880;\n  padding: 16px;\n  width: 300px;\n  margin-bottom: 16px;\n  line-height: 1.5;\n  cursor: pointer;\n}\n\n.separator {\n  font-weight: bold;\n  text-align: center;\n  width: 300px;\n  margin: 16px 0px;\n  color: #a07676;\n}\n\n.title {\n  color: #a07676;\n  font-weight: bold;\n  font-size: 1.25rem;\n  margin-bottom: 16px;\n}\n\n.text-loading {\n  font-size: 2rem;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}